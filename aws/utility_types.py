import hashlib
import base64
import secrets


class PasswordUtility(object):
    def __init__(self):
        pass

    def __get_salt_bytes(self, length: int = 32) -> bytes:
        """
        Args:
            length (int, 32):
                Length of bytes to return
        Returns:
            bytes:
                A list of randomly generated bytes of stated length
        """
        return secrets.token_bytes(length)

    def hash_password(self, password_text: str, salt_bytes: bytes = None) -> tuple[str, str]:
        """
        Hash a password given text and salt using SHA256
        If salt is not provide, a randomly generated salt will be used.

        Args:
            password_text (str):
                Plain text to be hashed.
            salt_bytes (bytes, optional):
                List of bytes use to salt password.
        Returns:
            (hex_digest, salt_b64):
                hex_digest (str):
                    Hash result in hexadecimal
                salt_b64 (str):
                    A base64 representation of salt used in hashing
        """
        if salt_bytes is None:
            salt_bytes = self.__get_salt_bytes()
        password_bytes = password_text.encode('utf-8')
        combined_bytes = salt_bytes + password_bytes

        sha256 = hashlib.sha256()
        sha256.update(combined_bytes)
        return sha256.hexdigest(), base64.b64encode(salt_bytes).decode()

    def decode_base64_to_bytes(self, base64_string: str) -> bytes:
        """Decodes a base64 string to a list of bytes
        Args:
            base64_string (str):
                Base64 string to be decoded into byte list
        Returns:
            bytes:
                List of bytes representing the base64 form of the argument

        """
        return base64.b64decode(base64_string)

    def __str__(self):
        """
        Returns:
            str:
                Class name of utility object
        """
        return self.__class__.__name__

    def __repr__(self):
        """
        Returns:
            str:
                Class name of utility object
        """
        return self.__class__.__name__


if __name__ == "__main__":
    cls = PasswordUtility()
    print(cls)
